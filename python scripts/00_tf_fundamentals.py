# -*- coding: utf-8 -*-
"""00_tf_fundamentals.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QHgAG4ODA56fMCXPLLyQrTkCpyq7YfaN

# First part of tensorflow developer course
"""

import tensorflow as tf
print(tf.__version__)

"""create tensors with tf.Constant()"""

scalar = tf.constant(7)
scalar

scalar.ndim # number of dimensions

vector = tf.constant([5, 6])
vector

vector.ndim

matrix = tf.constant([[2,3], [4,5]])
matrix

matrix.ndim

matrix_2 = tf.constant([[20, 3.],
                        [3, 4],
                        [3, 54]], dtype = tf.float16)

matrix_2

matrix_2.ndim

tensor = tf.constant([[[3,4,5],
                       [4, 5,6]],
                      [[3,4,5,],
                      [45,5,6]],
                      [[4,5,6],
                       [4,5,6]]])

tensor

tensor_2 = tf.Variable([10, 7])
tensor_2

tensor_2[0].assign(0)

random_1 = tf.random.Generator.from_seed(42)
random_1 = random_1.normal(shape = (3,2))
random_1

not_shuffled = tf.constant([[10, 4],
                            [2, 4]])

tf.random.shuffle(not_shuffled)

tf.ones(shape = (3,4))

tf.zeros(shape = (3,4))

import numpy as np

array_A = np.array([3,4,6,3,5,5,6,7,3,45,])

array_A

tensor_A = tf.constant(array_A)

tensor_A.shape

tf.size(tensor_A)

tensorB = tf.zeros(shape =[2,3,4,5])

tensorB

tensorB.shape

#tensorB.numpy()

# Nnew axis
tensor_C = tensorB[..., tf.newaxis]

#tf.expand_dims(tensorB, axis = 3)

#tf.add(tensor_C, 20)

tensor

tf.transpose(tensor)

X = tf.Variable([[5,6, 6], [3, 8,8]])

X

y = tf.Variable([[3,4,], [3,8], [5,1]])

y

tf.matmul(X, y)

tf.tensordot(X, y, axes = 1)

tf.transpose(X)

D = tf.cast(X, dtype = tf.float16)

D

tf.reduce_max(D)

tf.reduce_mean(X)

tf.reduce_mean(D)

import tensorflow_probability as tfp

tfp.stats.variance(D)

"""positional min and max"""

F = tf.random.uniform(shape = [50, 3])
F



tf.argmax(F)

tf.reduce_max(F)

tf.config.list_physical_devices()

