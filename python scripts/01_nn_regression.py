# -*- coding: utf-8 -*-
"""01_nn_regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HaDeld4iZArJiuJ_5kgZEhbc8GMJ1Pes

# Regression with Neural Networks in Tensorflow
"""

import tensorflow as tf
print(tf.__version__)

house_info = tf.constant(['bedroom', 'bathroom', 'garage'])
house_price = tf.constant([969699])

# 1. Create
model = tf.keras.Sequential([
    tf.keras.layers.Dense(1)
])

# 2. Compile
model.compile(loss = tf.keras.losses.mae, optimizer = tf.keras.optimizers.SGD(), metrics = ['mae'])

X = tf.constant([[3,4,5],
                 [5,6,7],
                 [2,7,5]])

X

B = tf.math.add(X, 10)

y = tf.constant([3, 4, 6])

y

# 3. Fit
model.fit(X, y, epochs = 5)

"""#### Trying to improve performance

Trying various techniwues to improve performance such as number of layers and epochs
"""

# 1. Create

model = tf.keras.models.Sequential()

model.add(tf.keras.layers.Dense(100, activation = 'relu'))
model.add(tf.keras.layers.Dense(100, activation = 'relu'))
model.add(tf.keras.layers.Dense(100, activation = 'relu'))
model.add(tf.keras.layers.Dense(1))

# 2. Compile

model.compile(loss = tf.keras.losses.mae, optimizer = tf.keras.optimizers.SGD(), metrics = ['mae'])

# 3. Fit

model.fit(X, y, epochs = 100)

"""Further model improving"""

X = tf.range(-100, 100, 4)
X

y = X + 10

y

import matplotlib.pyplot as plt

plt.scatter(X, y)

len(X)

"""split up into testing and training"""

X_train, X_test, y_train, y_test = X[:40], X[40:], y[:40], y[40:] # 80/20 split

len(X_train)

plt.scatter(X_train, y_train)
plt.scatter(X_test, y_test)
plt.show()

# 1. Create Model
model = tf.keras.Sequential([
              tf.keras.layers.Dense(1, input_shape = [1]),
              tf.keras.layers.Dense(10),              
              tf.keras.layers.Dense(1)
])

# 2. Compile 
model.compile(loss = tf.keras.losses.mae, optimizer = tf.keras.optimizers.SGD(), metrics = ['mae'])

model.build()

model.summary()

model.fit(X_train, y_train, epochs = 50)

from tensorflow.keras.utils import plot_model

plot_model(model, show_shapes = True)

preds = model.predict(X_test)

def plot_predictions(
    train_data,
    train_labels,
    test_data,
    test_labels,
    predictions
):
  plt.figure()
  plt.scatter(train_data, train_labels, label = 'Training Data')
  plt.scatter(test_data, test_labels, label = 'Test Data')
  plt.scatter(test_data, predictions, label = 'Predictions')
  plt.legend()
  plt.show()

plot_predictions(X_train, y_train, X_test, y_test, preds)

model.evaluate(X_test, y_test)

"""#### Saving Model"""

model.save('saved_model_format')

model.save('model_hdf5_format.hdf5')



"""#### Loading Model"""

model_loaded = tf.keras.models.load_model('saved_model_format')

model_loaded_h5 = tf.keras.models.load_model('model_hdf5_format.hdf5')

"""## Example"""

import pandas as pd

df = pd.read_csv('https://gist.githubusercontent.com/meperezcuello/82a9f1c1c473d6585e750ad2e3c05a41/raw/d42d226d0dd64e7f5395a0eec1b9190a10edbc03/Medical_Cost.csv')

df.head()

df.info()

"""transform categorical featrues"""

df = pd.get_dummies(df, columns = ['sex', 'smoker', 'region'])

df.head()

df[['charges']].hist(bins = 50)

from sklearn.model_selection import train_test_split

X, y = df.iloc[:,df.columns != 'charges'], df[['charges']]

X_train, X_test, y_train, y_test = train_test_split(X, y)

model = tf.keras.Sequential()

model.add(tf.keras.layers.Dense(20, input_shape = (X.shape[1],), activation = 'relu'))
model.add(tf.keras.layers.Dense(50, activation = 'relu'))
model.add(tf.keras.layers.Dense(50, activation = 'relu'))
model.add(tf.keras.layers.Dense(1))

model.summary()

plot_model(model)

model.compile(loss = 'mae', optimizer='Adam')

model.fit(X_train, y_train, epochs = 200)

model.evaluate(X_test, y_test)

from sklearn.preprocessing import StandardScaler

sc = StandardScaler()

X_train_scaled = sc.fit_transform(X_train)
X_test_scaled = sc.transform(X_test)

model = tf.keras.Sequential()

model.add(tf.keras.layers.Dense(20, input_shape = (X.shape[1],), activation = 'relu'))
model.add(tf.keras.layers.Dense(50, activation = 'relu'))
model.add(tf.keras.layers.Dense(50, activation = 'relu'))
model.add(tf.keras.layers.Dense(1))

model.compile(loss = 'mae', optimizer='Adam')

model.fit(X_train_scaled, y_train, epochs = 400)

model.evaluate(X_test_scaled, y_test)

